buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven {url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:0.5"
    }
}

//TEST LINK: http://localhost:8080/TechnologyWatch-0.1-DEV

group 'TechnologyWatch'
version '0.1-DEV'

//apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    google()
    maven {url 'https://maven.java.net/content/groups/promoted'}
    maven {url 'http://repository.jboss.org/nexus/content/groups/public'}
}

final String PROTOBUF_VERSION = '3.6.1'

dependencies {
    //compile 'org.glassfish.main.extras:glassfish-embedded-all:4.0-b72'
    implementation 'javax:javaee-api:8.0'
    implementation "com.google.protobuf:protobuf-java:${PROTOBUF_VERSION}"
    implementation 'org.xerial:sqlite-jdbc:3.25.2'
    testImplementation 'junit:junit:4.10'
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java/']
        proto.srcDirs = ['src/main/proto/']
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${PROTOBUF_VERSION}"
    }
    generateProtoTasks {
        def genProtoTasks = ofSourceSet('main')
        genProtoTasks*.builtins {
            java {
                option 'output_dir=java'
                outputSubDir = ''
            }
            js {
                option 'import_style=commonjs'
                option 'binary'
                option 'output_dir=js'
                outputSubDir = ''
            }
        }
        rootProject.extensions.idea.project.settings {
            taskTriggers {
                beforeBuild(genProtoTasks as Task[])
            }
        }
    }
    generatedFilesBaseDir = "${projectDir}/build/generated/source/proto"
}

war {
  //exclude "TW/js/proto"
  from( "${projectDir}/build/generated/source/proto/main/js", { into 'TW/js/proto' })
}

/*Change with your glassfish home*/
final String GLASSFISH_HOME = '/opt/glassfish5'

task glassfishStart(dependsOn: 'war', type:Exec) {
    workingDir "${GLASSFISH_HOME}${File.separator}bin"
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'asadmin.bat'
    } else {
        commandLine "./asadmin"
    }
    args "start-domain"
}

task glassfishStop(dependsOn: 'war', type:Exec) {
    workingDir "${GLASSFISH_HOME}${File.separator}bin"
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'asadmin.bat'
    } else {
        commandLine "./asadmin"
    }
    args "stop-domain"
}

task run(dependsOn: 'war', type:Exec) {
    workingDir "${GLASSFISH_HOME}${File.separator}bin"
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'asadmin.bat'
    } else {
        commandLine "./asadmin"
    }
    args "deploy", "--force=true", "${war.archivePath}"
}